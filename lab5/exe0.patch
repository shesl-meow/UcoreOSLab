diff --git a/labcodes/lab5/kern/debug/kdebug.c b/labcodes/lab5/kern/debug/kdebug.c
index bb63b7d..9474602 100644
--- a/labcodes/lab5/kern/debug/kdebug.c
+++ b/labcodes/lab5/kern/debug/kdebug.c
@@ -305,5 +305,18 @@ print_stackframe(void) {
       *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
       *                   the calling funciton's ebp = ss:[ebp]
       */
+      uint32_t ebp=read_ebp();
+      uint32_t eip=read_eip();
+      for(int i=0;ebp != 0&&i<STACKFRAME_DEPTH;i++){
+          cprintf("ebp: 0x%08x ,eip: 0x%08x ",ebp,eip);
+          cprintf("args: ");
+          for(int j=0;j<4;j++){
+              cprintf("0x%08x  ",*((uint32_t *)ebp+2+j));
+          }
+          print_debuginfo(eip - 1);
+          eip=*((uint32_t *)ebp+1);
+          ebp=*(uint32_t *)ebp;
+   
+      }
 }
 
diff --git a/labcodes/lab5/kern/mm/default_pmm.c b/labcodes/lab5/kern/mm/default_pmm.c
index b388bca..e213858 100644
--- a/labcodes/lab5/kern/mm/default_pmm.c
+++ b/labcodes/lab5/kern/mm/default_pmm.c
@@ -135,12 +135,14 @@ default_alloc_pages(size_t n) {
         }
     }
     if (page != NULL) {
-        list_del(&(page->page_link));
+       
         if (page->property > n) {
             struct Page *p = page + n;
             p->property = page->property - n;
-            list_add(&free_list, &(p->page_link));
+            SetPageProperty(p);
+            list_add_after(&(page->page_link), &(p->page_link));
     }
+        list_del(&(page->page_link));
         nr_free -= n;
         ClearPageProperty(page);
     }
@@ -175,7 +177,16 @@ default_free_pages(struct Page *base, size_t n) {
         }
     }
     nr_free += n;
-    list_add(&free_list, &(base->page_link));
+    le = list_next(&free_list);
+    while (le != &free_list) {
+        p = le2page(le, page_link);
+        if (base + base->property <= p) {
+            assert(base + base->property != p);
+            break;
+        }
+        le = list_next(le);
+    }
+    list_add_before(le, &(base->page_link));
 }
 
 static size_t
diff --git a/labcodes/lab5/kern/mm/pmm.c b/labcodes/lab5/kern/mm/pmm.c
index bd534bd..6e97a41 100644
--- a/labcodes/lab5/kern/mm/pmm.c
+++ b/labcodes/lab5/kern/mm/pmm.c
@@ -363,18 +363,18 @@ get_pte(pde_t *pgdir, uintptr_t la, bool create) {
      *   PTE_W           0x002                   // page table/directory entry flags bit : Writeable
      *   PTE_U           0x004                   // page table/directory entry flags bit : User can access
      */
-#if 0
-    pde_t *pdep = NULL;   // (1) find page directory entry
-    if (0) {              // (2) check if entry is not present
-                          // (3) check if creating is needed, then alloc page for page table
-                          // CAUTION: this page is used for page table, not for common data page
-                          // (4) set page reference
-        uintptr_t pa = 0; // (5) get linear address of page
-                          // (6) clear page content using memset
-                          // (7) set page directory entry's permission
-    }
-    return NULL;          // (8) return page table entry
-#endif
+    pde_t *pdep = &pgdir[PDX(la)];          // (1) find page directory entry
+    if (!(*pdep & PTE_P)) {                 // (2) check if entry is not present
+        struct Page *page;                  // (3) check if creating is needed, then alloc page for page table
+        if (!create || (page = alloc_page()) == NULL) {
+            return NULL;
+        }
+        set_page_ref(page, 1);              // (4) set page reference
+        uintptr_t pa = page2pa(page);       // (5) get linear address of page
+        memset(KADDR(pa), 0, PGSIZE);       // (6) clear page content using memset
+        *pdep = pa | PTE_U | PTE_W | PTE_P; // (7) set page directory entry's permission
+    }                                       // (8) return page table entry
+    return &((pte_t *)KADDR(PDE_ADDR(*pdep)))[PTX(la)];
 }
 
 //get_page - get related Page struct for linear address la using PDT pgdir
@@ -420,6 +420,14 @@ page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {
                                   //(6) flush tlb
     }
 #endif
+ if (*ptep & PTE_P) {
+        struct Page *page = pte2page(*ptep);
+        if (page_ref_dec(page) == 0) {
+            free_page(page);
+        }
+        *ptep = 0;
+        tlb_invalidate(pgdir, la);
+    }
 }
 
 //page_remove - free an Page which is related linear address la and has an validated pte
diff --git a/labcodes/lab5/kern/mm/swap_fifo.c b/labcodes/lab5/kern/mm/swap_fifo.c
index cd96a03..87043e8 100644
--- a/labcodes/lab5/kern/mm/swap_fifo.c
+++ b/labcodes/lab5/kern/mm/swap_fifo.c
@@ -48,9 +48,7 @@ _fifo_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int
     list_entry_t *entry=&(page->pra_page_link);
  
     assert(entry != NULL && head != NULL);
-    //record the page access situlation
-    /*LAB3 EXERCISE 2: YOUR CODE*/ 
-    //(1)link the most recent arrival page at the back of the pra_list_head qeueue.
+    list_add(head, entry);
     return 0;
 }
 /*
@@ -60,14 +58,14 @@ _fifo_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int
 static int
 _fifo_swap_out_victim(struct mm_struct *mm, struct Page ** ptr_page, int in_tick)
 {
-     list_entry_t *head=(list_entry_t*) mm->sm_priv;
-         assert(head != NULL);
-     assert(in_tick==0);
-     /* Select the victim */
-     /*LAB3 EXERCISE 2: YOUR CODE*/ 
-     //(1)  unlink the  earliest arrival page in front of pra_list_head qeueue
-     //(2)  assign the value of *ptr_page to the addr of this page
-     return 0;
+    list_entry_t *head=(list_entry_t*) mm->sm_priv;
+    assert(head != NULL && in_tick==0);
+    list_entry_t *tail = head->prev;            // Select the victim
+    assert(tail != head);                       // this isn't a one-element-list
+    *ptr_page = le2page(tail, pra_page_link);   // (2)  assign the value of *ptr_page to the addr of this page
+    list_del(tail);                             // (1)  unlink the  earliest arrival page in front of pra_list_head qeueue
+    assert(*ptr_page != NULL);
+    return 0;
 }
 
 static int
diff --git a/labcodes/lab5/kern/mm/vmm.c b/labcodes/lab5/kern/mm/vmm.c
index b402145..3f0f18b 100644
--- a/labcodes/lab5/kern/mm/vmm.c
+++ b/labcodes/lab5/kern/mm/vmm.c
@@ -361,7 +361,9 @@ do_pgfault(struct mm_struct *mm, uint32_t error_code, uintptr_t addr) {
     *   mm->pgdir : the PDT of these vma
     *
     */
+     
 #if 0
+
     /*LAB3 EXERCISE 1: YOUR CODE*/
     ptep = ???              //(1) try to find a pte, if pte's PT(Page Table) isn't existed, then create a PT.
     if (*ptep == 0) {
@@ -393,6 +395,33 @@ do_pgfault(struct mm_struct *mm, uint32_t error_code, uintptr_t addr) {
         }
    }
 #endif
+    ptep = get_pte(mm->pgdir, addr, 1);
+    if (ptep  == NULL) {
+        
+        goto failed;
+    }
+    
+    if (*ptep == 0) { 
+        struct Page* page=pgdir_alloc_page(mm->pgdir, addr, perm) ;
+        if (page == NULL) {
+            
+            goto failed;
+        }
+    } else {
+        if(swap_init_ok) {
+            struct Page *page=NULL;
+            if ((ret = swap_in(mm, addr, &page)) != 0) {    // (1ï¼‰According to the mm AND addr, try to load the content of right disk page
+                                                            //    into the memory which page managed.
+                goto failed;
+            }
+            page_insert(mm->pgdir, page, addr, perm);       // (2) According to the mm, addr AND page, setup the map of phy addr <---> logical addr
+            swap_map_swappable(mm, addr, page, 1);          // (3) make the page swappable.
+            page->pra_vaddr = addr;
+        } else {
+            cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
+            goto failed;
+        }
+    }
    ret = 0;
 failed:
     return ret;
diff --git a/labcodes/lab5/kern/process/proc.c b/labcodes/lab5/kern/process/proc.c
index 7d57c65..06daabc 100644
--- a/labcodes/lab5/kern/process/proc.c
+++ b/labcodes/lab5/kern/process/proc.c
@@ -86,23 +86,24 @@ static struct proc_struct *
 alloc_proc(void) {
     struct proc_struct *proc = kmalloc(sizeof(struct proc_struct));
     if (proc != NULL) {
-    //LAB4:EXERCISE1 YOUR CODE
-    /*
-     * below fields in proc_struct need to be initialized
-     *       enum proc_state state;                      // Process state
-     *       int pid;                                    // Process ID
-     *       int runs;                                   // the running times of Proces
-     *       uintptr_t kstack;                           // Process kernel stack
-     *       volatile bool need_resched;                 // bool value: need to be rescheduled to release CPU?
-     *       struct proc_struct *parent;                 // the parent process
-     *       struct mm_struct *mm;                       // Process's memory management field
-     *       struct context context;                     // Switch here to run process
-     *       struct trapframe *tf;                       // Trap frame for current interrupt
-     *       uintptr_t cr3;                              // CR3 register: the base addr of Page Directroy Table(PDT)
-     *       uint32_t flags;                             // Process flag
-     *       char name[PROC_NAME_LEN + 1];               // Process name
-     */
+        proc->state = PROC_UNINIT;                      // Process state
+        proc->pid = -1;                                 // Process ID
+        proc->runs = 0;                                 // the running times of Proces
+        proc->kstack = 0;                               // Process kernel stack
+        proc->need_resched = 0;                         // bool value: need to be rescheduled to release CPU?
+        proc->parent = NULL;                            // the parent process
+        proc->mm = NULL;                                // Process's memory management field
+        memset(
+            &(proc->context),                           // Switch here to run process
+            0,
+            sizeof(struct context)
+        );
+        proc->tf = NULL;                                // Trap frame for current interrupt
+        proc->cr3 = boot_cr3;                           // CR3 register: the base addr of Page Directroy Table(PDT)
+        proc->flags = 0;                                // Process flag
+        memset(proc->name, 0, PROC_NAME_LEN);           // Process name
     }
+    
     return proc;
 }
 
@@ -296,6 +297,32 @@ do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
     //    5. insert proc_struct into hash_list && proc_list
     //    6. call wakeup_proc to make the new child process RUNNABLE
     //    7. set ret vaule using child proc's pid
+  if ((proc = alloc_proc()) == NULL) {
+        goto fork_out;
+    }
+
+    proc->parent = current;
+
+    if (setup_kstack(proc) != 0) {
+        goto bad_fork_cleanup_proc;
+    }
+    if (copy_mm(clone_flags, proc) != 0) {
+        goto bad_fork_cleanup_kstack;
+    }
+    copy_thread(proc, stack, tf);
+
+    bool intr_flag;
+    local_intr_save(intr_flag);
+    {
+        proc->pid = get_pid();
+        hash_proc(proc);
+        list_add(&proc_list, &(proc->list_link));
+        nr_process +=1;
+    }
+    local_intr_restore(intr_flag);
+
+    wakeup_proc(proc);
+    ret = proc->pid;
 fork_out:
     return ret;
 
diff --git a/labcodes/lab5/kern/trap/trap.c b/labcodes/lab5/kern/trap/trap.c
index 90f266e..d7cf1c8 100644
--- a/labcodes/lab5/kern/trap/trap.c
+++ b/labcodes/lab5/kern/trap/trap.c
@@ -48,6 +48,17 @@ idt_init(void) {
       *     You don't know the meaning of this instruction? just google it! and check the libs/x86.h to know more.
       *     Notice: the argument of lidt is idt_pd. try to find it!
       */
+    extern uintptr_t __vectors[];
+    for (int i = 0; i < 256; i++) {
+        if (i < IRQ_OFFSET) { 
+            SETGATE(idt[i], 1, GD_KTEXT, __vectors[i], DPL_KERNEL); 
+        } else if (i == T_SYSCALL) { 
+            SETGATE(idt[i], 1, GD_KTEXT, __vectors[i], DPL_USER);
+        } else { 
+            SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
+        }
+    }
+    lidt(&idt_pd);
 }
 
 static const char *
@@ -186,6 +197,7 @@ trap_dispatch(struct trapframe *tf) {
          * (2) Every TICK_NUM cycle, you can print some info using a funciton, such as print_ticks().
          * (3) Too Simple? Yes, I think so!
          */
+        if(++ticks % TICK_NUM == 0) print_ticks();
         break;
     case IRQ_OFFSET + IRQ_COM1:
         c = cons_getc();
